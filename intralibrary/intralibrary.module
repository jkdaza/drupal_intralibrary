<?php

/**
 * Implements hook_menu().
 */
function intralibrary_menu() {
  $items = array();

  $items['admin/config/media/intralibrary'] = array(
    'title' => 'Intralibrary',
    'description' => 'Configure Intralibrary credentials and settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('intralibrary_admin'),
    'access arguments' => array('administer intralibrary'),
    'file' => 'intralibrary.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function intralibrary_permission() {
	return array(
			'administer intralibrary' => array(
					'title' => t('Administer Intralibrary'),
			),
	);
}

/**
 * Implements hook_file_insert().
 */
function intralibrary_file_insert($file) {
	$extensions = variable_get('intralibrary_extensions','jpg png mp4');
	// Add a message to the log, if the file is a jpg
	$validate = file_validate_extensions($file, $extensions);
	if (empty($validate)) {
		
		/*
		 * Upload to Intralibrary
		 */
		//TO DO: Fetch file information from extended file object
		$params = array();
		//Set full path to file
		$file->tmp_name = drupal_realpath($file->uri);
		//Init Intralibrary
		$repository = _intralibrary_get_repository();
		//Add Metadata
		$repository->setParamArray($params,$required=true);
		//Deposit File to Intralibrary
		$deposit = $repository->upload((array) $file);
		//Update Drupal
		if ($deposit && isset($deposit['url'])) {
			$file_data = array(
					'fid' => $file->fid,
					'rep_fid' => (string) $deposit['response']->sac_id,
					'remote_uri' => $deposit['url'],
					'kaltura' => $deposit['kaltura']
			);
			drupal_write_record('intralibrary_files', $file_data);
			watchdog('file', 'An Intralibrary file has been added.');
			//delete local file
			$del = unlink($file->tmp_name);
			if(!$del) {
				watchdog('file', 'File :fid could not be deleted from local folder.',array(':fid' => $file->fid),WATCHDOG_ERROR);
			}
		}
	}
}

/**
 * Implements hook_file_load().
 */
function intralibrary_file_load($files) {
	// Add the upload specific data into the file object.
	$result = db_query('SELECT * FROM {intralibrary_files} u WHERE u.fid IN (:fids)', array(':fids' => array_keys($files)))
	->fetchAll(PDO::FETCH_ASSOC);
	
	foreach ($result as $record) {

		if (isset($record['remote_uri'])) {
			
			$remote_uri = $record['remote_uri'];
			$isKaltura = false; 
			if ($record['kaltura'] == 1) {
				$isKaltura = true;
				if (!isset($record['kaltura_data']) || !$record['kaltura_data']) {
					//Init Intralibrary
					$repository = _intralibrary_get_repository();
					//Get Video data from kaltura
					$kaltura_data = $repository->getKalturadata($remote_uri);
					
					if ($kaltura_data) {
						if (isset($kaltura_data['error'])) {
							drupal_set_message($kaltura_data['error'],'error');
						} else {
							if ($kaltura_data['entry_id'] && $kaltura_data['flavor_id']) {
								$remote_uri = _intralibrary_get_mp4_path($kaltura_data['entry_id'],$kaltura_data['flavor_id']);
								$store_kd = array(
										'fid' => $record['fid'],
										'remote_uri' => $remote_uri,
										'kaltura_data' => json_encode($kaltura_data)
								);
									
								drupal_write_record('intralibrary_files', $store_kd, array('fid'));
							}
						}
					}
				}	
			}
			if ($record['data']) {
				$intralibrary_data = json_decode($record['data'],true);
				foreach ($intralibrary_data as $key => $value) {
					$files[$record['fid']]->$key = $value;		
				}
			}
			$files[$record['fid']]->kaltura = $isKaltura;
			$files[$record['fid']]->uri = $remote_uri;		
		}
	}
}

function intralibrary_services_resources() {
	return array(
			'node' => array(
				'targeted_actions' => array(
						'attach_file_extended' => array(
								'help' => 'Upload and attach file(s) to a node, Extended for Intralibrary integration. POST multipart/form-data to node/123/attach_file',
								//'file' => array('type' => 'module', 'module' => 'intralibrary', 'name' => 'resources/node_resource'),
								'callback' => '_intralibrary_node_resource_attach_file',
								'access callback' => '_node_resource_access',
								'access arguments' => array('update'),
								'access arguments append' => TRUE,
								'args' => array(
										array(
												'name' => 'nid',
												'optional' => FALSE,
												'source' => array('path' => 0),
												'type' => 'int',
												'description' => 'The nid of the node to attach a file to',
										),
										array(
												'name' => 'field_name',
												'optional' => FALSE,
												'source' => array('data' => 'field_name'),
												'description' => 'The file field name',
												'type' => 'string',
										),
										array(
												'name' => 'attach',
												'optional' => TRUE,
												'source' => array('data' => 'attach'),
												'description' => 'Attach the file(s) to the node. If FALSE, this clears ALL files attached, and attaches the files',
												'type' => 'int',
												'default value' => TRUE,
										),
										array(
												'name' => 'field_values',
												'optional' => TRUE,
												'source' => array('data' => 'field_values'),
												'description' => 'The extra field values',
												'type' => 'array',
												'default value' => array(),
										),
								),
						),
				),
			),
	);

}

/*
 * CALLBACK FUNCTIONS
 */


function _intralibrary_get_mp4_path($entry_id, $flavor_id) {
	$host = 'http://kaltura.bcu.ac.uk/';
	$partner_id = '110';
	$uri = $host.'p/'.$partner_id.'/sp/'.$partner_id.'00/playManifest/entryId/'.$entry_id;
	$uri .= '/flavorId/'.$flavor_id.'/format/url/protocol/http/a.mp4';
	
	return $uri;
}

function _intralibrary_node_resource_attach_file($nid, $field_name, $attach, $field_values) {
		$node = node_load($nid);
		$node_type=$node->type;
	
		if (empty($node->{$field_name}[LANGUAGE_NONE] )) {
			$node->{$field_name}[LANGUAGE_NONE] = array();
		}
	
		// Validate whether field instance exists and this node type can be edited.
		_node_resource_validate_node_type_field_name('update', array($node_type, $field_name));
	
		$counter = 0;
		if ($attach) {
			$counter = count($node->{$field_name}[LANGUAGE_NONE]);
		}
		else {
			$node->{$field_name}[LANGUAGE_NONE] = array();
		}
	
		$options = array('attach' => $attach, 'file_count' => $counter);
	
		list($files, $file_objs) = _node_resource_file_save_upload($node_type, $field_name, $options);
		// Retrieve the field settings.
		$field = field_info_field($field_name);
	
		foreach ($file_objs as $key => $file_obj) {
			/*if (isset($field_values[$key])) {
				foreach ($field_values[$key] as $key => $value) {
					$file_obj->$key = $value;
				}
			}*/
			//Store Extra field in {intralibrary_files} table
			if (isset($file_obj->source) && isset($field_values[$file_obj->source])) {
				$extra_file_fields = $field_values[$file_obj->source];
				
				$intralibrary_data = array();
				$result = db_query('SELECT data FROM {intralibrary_files} u WHERE u.fid = :fid', array(':fid' =>$file_obj->fid))
				->fetchAll(PDO::FETCH_ASSOC);
				
				foreach ($result as $record) {
					if (isset($record['data']) && $record['data']) {
						$intralibrary_data = json_decode($record['data'],true);
					}
				}

				$intralibrary_data = array_merge($intralibrary_data,$extra_file_fields);
				$store = array(
					'fid' => $file_obj->fid,
					'data' => json_encode($intralibrary_data)
				);
				drupal_write_record('intralibrary_files', $store, array('fid'));
			}
	
			$node->{$field_name}[LANGUAGE_NONE][$counter] = (array)$file_obj;
			// Check the field display settings.
			if (isset($field['settings']['display_field'])) {
				// Set the display option.
				$node->{$field_name}[LANGUAGE_NONE][$counter]['display'] = $field['settings']['display_field'];
			}
			$counter++;
		}
	
		node_save($node);
	
		return $files;
}
/*
 * INTRALIBRARY library wrappers
 */

function _intralibrary_get_repository() {
	global $user;
	$user->loadIntralibrarySettings();

	$config = new stdClass();
	$config->hostname = variable_get('intralibrary_hostname','');
	$config->username = variable_get('intralibrary_username','');
	$config->password = variable_get('intralibrary_hpassword','');
	$config->admin_username = variable_get('intralibrary_admin_username','');
	$config->admin_password = variable_get('intralibrary_password','');
	 
	//include libraries
	module_load_include('php', 'intralibrary', 'libs/Intralibrary');
	return new Intralibrary($user,$config);

}